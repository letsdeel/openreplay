application: openreplay
clusterConfig:
  namespace: openreplay
fromVersion: "v1.10.0"
# Databases specific variables
postgresql: &postgres
  postgresqlPassword: ""
  postgresqlHost: "rds.openreplay.deel"
  postgresqlPort: 5432
  postgresqlUser: "openreplay"
  existingSecret: openreplay-external-secrets
  postgresqlDatabase: "openreplay"
  enabled: false
clickhouse: &clickhouse
  existingSecret: openreplay-external-secrets
  enabled: true
  chHost: clickhouse-openreplay-clickhouse.db.svc.cluster.local
  username: "default"
  password: ""
  service:
    webPort: 9000
  altinity-clickhouse-operator:
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: observability
  storage:
    size: 300Gi
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
    topology.kubernetes.io/zone: eu-west-1b
  resources:
    requests:
      memory: 14Gi
      cpu: 3
    limits:
      memory: 15Gi
      cpu: 4
quickwit: &quickwit
  enabled: false
kafka: &kafka
  kafkaHost: "msk.openreplay.deel"
  zookeeperHost: "databases-zookeeper.svc.cluster.local"
  zookeeperNonTLSPort: 2181
  kafkaPort: "9094"
  kafkaUseSsl: "true"
  maxMessageBytes: 3145728
  extraEnvVars:
    - name: KAFKA_CFG_REPLICA_FETCH_MAX_BYTES
      value: "3145728"
  enabled: false
redis: &redis
  redisHost: "redis.openreplay.deel"
  redisPort: "6379"
  enabled: true
minio:
  enabled: false
  global:
    minio:
      accessKey: "deel"
      secretKey: ""
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
    topology.kubernetes.io/zone: eu-west-1b
ingress-nginx: &ingress-nginx
  controller:
    ingressClassResource:
      name: openreplay
    ingressClass: openreplay
    service:
      ports:
        http: 80
        https: 443
      type: "ClusterIP"
    extraArgs:
      default-ssl-certificate: "app/openreplay-ssl"
    config:
      use-gzip: true
      load-balance: ewma
      enable-real-ip: true
      ssl-redirect: false
      force-ssl-redirect: false
      proxy-body-size: 10m
      use-forwarded-headers: true
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: observability
        namespaceSelector:
          any: true
    autoscaling:
      enabled: false
      minReplicas: 2
      maxReplicas: 4
      targetCPUUtilizationPercentage: 60
      targetMemoryUtilizationPercentage: 60
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
# Application specific variables
global:
  existingsecret:
    name: openreplay-external-secrets
  secretKeys:
    postgresqlPassword: "postgresql-password"
    clickhousePassword: "clickhouse-password"
    minioSecretKey: minioSecretKey
    enterpriseEditionLicense: enterpriseEditionLicense
    chaliceIdpTenantKey: chaliceIdpTenantKey
    chaliceIdpX509Cert: chaliceIdpX509Cert
    s3AccessKey: "s3-access-key"
    s3SecretKey: "s3-secret-key"
  enterpriseEditionLicense: ""
  ingress: *ingress-nginx
  postgresql: *postgres
  kafka: *kafka
  redis: *redis
  quickwit: *quickwit
  clickhouse: *clickhouse
  openReplayContainerRegistry: "public.ecr.aws/p1t3u8a3"
  assistKey: ""
  assistJWTSecret: ""
  pvcRWXName: "openreplay"
  s3:
    region: "eu-west-1"
    endpoint: "https://s3.eu-west-1.amazonaws.com"
    assetsBucket: "deel-openreplay-assets"
    recordingsBucket: "deel-openreplay-recordings"
    sourcemapsBucket: "deel-openreplay-sourcemaps"
    vaultBucket: "vault-data"
    quickwitBucket: "quickwit"
    accessKey: ""
    secretKey: ""
  email:
    emailHost: ''
    emailPort: '587'
    emailUser: ''
    emailPassword: ''
    emailUseTls: 'true'
    emailUseSsl: 'false'
    emailSslKey: ''
    emailSslCert: ''
    emailFrom: 'OpenReplay<do-not-reply@openreplay.com>'
  domainName: "openreplay-new.deel.tools"
chalice:
  replicaCount: 2
  env:
    enforce_SSO: true
    jwt_secret: "8b8fd3ea7880964796b20909b88219f6519bf59c"
    EXP_AUTOCOMPLETE: true
    idp_entityId: https://accounts.google.com/o/saml2?idpid=C044b01jc
    idp_name: G-Suite
    idp_sso_url: https://accounts.google.com/o/saml2/idp?idpid=C044b01jc
    idp_tenantKey: "wLzbMSyXTJLsdQWcfMSt"
    idp_x509cert: "MIIDdDCCAlygAwIBAgIGAXGYdmCZMA0GCSqGSIb3DQEBCwUAMHsxFDASBgNVBAoTC0dvb2dsZSBJbmMuMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MQ8wDQYDVQQDEwZHb29nbGUxGDAWBgNVBAsTD0dvb2dsZSBGb3IgV29yazELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWEwHhcNMjAwNDIwMTY0MDI1WhcNMjUwNDE5MTY0MDI1WjB7MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEPMA0GA1UEAxMGR29vZ2xlMRgwFgYDVQQLEw9Hb29nbGUgRm9yIFdvcmsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz6ZDWN9k6S8boKAA9d6AygsNZ"
    tag: v1.10.2
    pullPolicy: Always
alerts:
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
assets:
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
peers:
  image:
    pullPolicy: IfNotPresent
db:
  image:
    pullPolicy: IfNotPresent
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
  replicaCount: 4
  resources:
    limits:
      cpu: 512m
      memory: 1Gi
    requests:
      cpu: 512m
      memory: 1Gi
ender:
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
  resources:
    limits:
      cpu: 1024m
      memory: 4000Mi
    requests:
      cpu: 256m
      memory: 512Mi
http:
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/cors-allow-methods: POST
      nginx.ingress.kubernetes.io/cors-allow-headers: Content-Type,Authorization,Content-Encoding
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.deel.com,https://app.deel.training"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length"
  autoscaling:
    enabled: true
    maxReplicas: 10
    minReplicas: 4
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  env:
    CACHE_ASSETS: true
  image:
    pullPolicy: Always
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
  replicaCount: 3
  resources:
    limits:
      cpu: 512m
      memory: 6Gi
    requests:
      cpu: 256m
      memory: 6Gi
integrations:
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
sink:
  autoscaling:
    enabled: true
    maxReplicas: 6
    minReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  image:
    pullPolicy: Always
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
  pvc:
    name: openreplay
  resources:
    limits:
      cpu: 1
      memory: 512Mi
    requests:
      cpu: 0.5
      memory: 256Mi
storage:
  autoscaling:
    enabled: true
    maxReplicas: 6
    minReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  image:
    pullPolicy: Always
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
  pvc:
    name: openreplay
  replicaCount: 2
  resources:
    limits:
      memory: 3000Mi
    requests:
      cpu: 500m
      memory: 2000Mi
assist:
  env:
    uws: true
  nodeSelector:
    karpenter.sh/nodepool: on-demand-fleet
  resources:
    limits:
      cpu: 1024m
      memory: 8000Mi
    requests:
      cpu: 256m
      memory: 512Mi
frontend:
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/session-cookie-samesite: Strict
  image:
    tag: v1.10.2
    pullPolicy: Always
  service:
    type: ClusterIP
    ports:
      frontend: 8080
